---
title: "Causal Inference for Computational Social Science"
subtitle: "Regime Change Causal Modeling with V-Dem"
author: 
  - name: "Troy Cheng, Hongzhe Wang"
    email: yc1317@georgetown.edu
    affiliation: Georgetown University
    corresponding: true
df-print: kable
title-block-banner: "#0a0e1a"
title-block-banner-color: "#4DB8FF"
execute:
  warning: false
date: 2025-07-23
date-modified: last-modified
format:
  html:
    embed-resources: true
    toc: true                 
    toc-title: "Contents"     
    toc-location: right       
    number-sections: true
    number-depth: 3       
    smooth-scroll: true       
    css: troystyle.css 
    code-overflow: wrap
include-in-header:
  text: |
    <link rel="shortcut icon" href="assets/gu.ico" type="image/x-icon">           
highlight-style: nord       
engine: knitr
---

# Note:

Hi, Prof. Jeff, I encountered a rendering issue, I'll fix this file in 8 hours.

# Introduction

This project is a practice of causal inference, aiming to complete the journey from correlation to causation in empirical social science research. The study investigates macro-political transformations—particularly regime changes—through a causal lens grounded in computational methods. The analysis relies on [the Varieties of Democracy (V-Dem) dataset](https://github.com/vdeminstitute/vdemdata), one of the most comprehensive global sources on political regimes and democratic institutions. Covering nearly every country from the 18th century to the present, V-Dem provides detailed yearly indicators across political, economic, and social dimensions, allowing for the historical tracking of institutional change.

The analysis is guided by four core research questions:

RQ: What kinds of factors cause a country to undergo a regime change?

We study macro-political transformations with a causal lens. The unit is country–year. To avoid temporal leakage, the outcome is whether a regime change occurs in year t+1 given information available by the end of year t. We use V-Dem for yearly indicators. Conceptually, we posit that shocks (economic, conflict), mobilization (protest), repression, and institutional constraints shape the hazard of regime change, with possible unobserved country-level traits.

# Import Vdem Data using its R Package

```{r}
# Install V-Dem data package:
# install.packages("devtools")
# devtools::install_github("vdeminstitute/vdemdata")

library(vdemdata)
```

# Operationalizing Regime Change

V-Dem includes a variable, `v2reginfo`, that labels distinct historical phases within the same political entity (e.g., “Soviet Russia,” “USSR under Stalin,” “Post-Stalin USSR”) as separate regimes. While this fine-grained coding is valuable for phase-typed institutional histories, in this study I adopt a broader conception of “regime” tied to the persistence of the overarching political entity. Concretely, I operationalize regime change as a within-country shift in `histname` across adjacent years. This choice treats leader-centered or intra-regime episodes (that `v2reginfo` may separate) as continuity rather than change, while recognizing foundational transformations that coincide with historical-state redefinitions (e.g., mergers, dissolutions, refoundings). I report sensitivity analyses that compare this `histname`-based indicator to a `v2reginfo`-based alternative to gauge how inferences depend on the operationalization.

```{r}

#| label: make-regime-change
#| message: false
library(tidyverse)
library(stringr)
library(tidyr)

# 2.1 标准化 histname，避免大小写/空白导致的伪变化
vdem_change <- vdem %>%
  arrange(country_id, year) %>%
  mutate(histname_std = str_squish(str_to_lower(histname)))

# 2.2 基于 histname 的相邻年差异，定义当年是否“发生变迁”
vdem_change <- vdem_change %>%
  group_by(country_id) %>%
  mutate(
    regime_change_histname = as.integer(!is.na(histname_std) & histname_std != lag(histname_std))
  ) %>%
  ungroup() %>%
  mutate(regime_change_histname = replace_na(regime_change_histname, 0L))

# 2.3 面向预测：构造 Y_{t+1}（用 t 年特征预测 t+1 年是否变迁）
vdem_change <- vdem_change %>%
  group_by(country_id) %>%
  mutate(y_t1_histname = replace_na(lead(regime_change_histname, 1), 0L)) %>%
  ungroup()

```


```{r}
# 3.1 变迁的总体比例（基准率）
mean(vdem_change$regime_change_histname, na.rm = TRUE)

# 3.2 随机看几条发生变迁的记录（是否合理）
vdem_change %>%
  filter(regime_change_histname == 1) %>%
  select(country_name, year, histname) %>%
  head(10)
```



把 v2regendtype 的分布看清楚——既看总体分布，也看发生变迁（你用 y_t1_histname==1）时下一年的“结束类型”分布。只做这一步，先不建模。


```{r}
#| label: regendtype-distribution
#| message: false
library(dplyr)
library(tidyr)

# 1) 建立代码本（codebook → 标签映射）
regend_map <- tibble::tibble(
  v2regendtype = 0:13,
  regend_label = c(
    "Military coup d’état",                                   # 0
    "Coup by non-military groups",                            # 1
    "Self-coup (autogolpe)",                                  # 2
    "Assassination of leader (non-coup)",                     # 3
    "Natural death of leader",                                # 4
    "Loss in civil war",                                      # 5
    "Loss in inter-state war",                                # 6
    "Foreign intervention (non inter-state loss)",            # 7
    "Popular uprising",                                       # 8
    "Liberalization/democratization guided by leaders",       # 9
    "Other directed transformation under leaders",            # 10
    "Liberalization/democratization w/o leader guidance",     # 11
    "Other process (not 1–11)",                               # 12
    "Regime still exists"                                     # 13
  )
)

# 2) 总体分布（不区分是否发生变迁）
overall_dist <- vdem_change %>%
  filter(!is.na(v2regendtype)) %>%
  count(v2regendtype, name = "n") %>%
  left_join(regend_map, by = "v2regendtype") %>%
  mutate(p = n / sum(n)) %>%
  arrange(v2regendtype)

print(overall_dist)

# 3) 与你的“t→t+1 变迁”对齐：取下一年的结束类型（regend_t1）
vdem_change <- vdem_change %>%
  group_by(country_id) %>%
  mutate(regend_t1 = dplyr::lead(v2regendtype, 1)) %>%
  ungroup()

# 仅在 y_t1_histname == 1 的行里看分布（且排除 code=13 “still exists”）
change_event_dist <- vdem_change %>%
  filter(y_t1_histname == 1, !is.na(regend_t1), regend_t1 != 13) %>%
  count(regend_t1, name = "n") %>%
  left_join(regend_map, by = c("regend_t1" = "v2regendtype")) %>%
  mutate(p = n / sum(n)) %>%
  arrange(desc(p))

print(change_event_dist)

# 4) 两个极简检查
n_change_rows <- sum(vdem_change$y_t1_histname == 1, na.rm = TRUE)
n_labeled_events <- sum(vdem_change$y_t1_histname == 1 & !is.na(vdem_change$regend_t1) & vdem_change$regend_t1 != 13)
cat("# of t+1 change rows:", n_change_rows, "\n")
cat("# of t+1 rows with a non-13 end-type label:", n_labeled_events, "\n")


```
```{python}
import numpy as np
y = np.array([0, 1, 0, 0, 1, 1, 0, 1], dtype="int64")  # 8个样本

```


```{python}

import pymc as pm
from IPython.display import SVG

alpha, beta = 20*0.08, 20*(1-0.08)  # 先验参数

with pm.Model() as beta_bern:
    p_coup = pm.Beta("p_coup", alpha=alpha, beta=beta)
    coup_t1 = pm.Bernoulli("coup_t1", p=p_coup, observed=y)

dot = pm.model_to_graphviz(beta_bern)
svg_bytes = dot.pipe(format="svg")
print(SVG(svg_bytes).data)  # QMD + results: asis 下可以直接显示


```


```{python}
dot = pm.model_to_graphviz(beta_bern)
dot.render(filename="pgm", format="svg", cleanup=True)

```

![](pgm.svg)





```{=html}
<script>
document.addEventListener("DOMContentLoaded", function() {
    const toc = document.getElementById("TOC");
    if (toc) {
        const sourceLink = document.createElement("div");
        sourceLink.innerHTML = `
            <div class="toc-source">
                <a href="https://github.com/troy-yu-cheng/causalinference-finalproj" 
                   target="_blank" 
                   class="github-button">
                   <svg xmlns="http://www.w3.org/2000/svg" 
                        viewBox="0 0 24 24" 
                        width="16" 
                        height="16" 
                        fill="currentColor"
                        style="vertical-align: middle; margin-right: 5px;">
                     <path d="M12 0C5.373 0 0 5.373 0 12c0 5.303 3.438 9.8 8.207 11.387.6.113.82-.26.82-.577v-2.157c-3.338.726-4.033-1.416-4.033-1.416-.546-1.386-1.332-1.756-1.332-1.756-1.09-.745.083-.73.083-.73 1.205.084 1.84 1.237 1.84 1.237 1.07 1.832 2.807 1.303 3.492.996.108-.774.418-1.303.76-1.602-2.665-.3-5.466-1.332-5.466-5.93 0-1.311.468-2.382 1.237-3.222-.124-.302-.536-1.52.118-3.163 0 0 1.008-.322 3.3 1.23a11.516 11.516 0 0 1 3.002-.403 11.486 11.486 0 0 1 3.002.403c2.292-1.552 3.3-1.23 3.3-1.23.654 1.644.242 2.861.118 3.163.77.84 1.236 1.911 1.236 3.222 0 4.61-2.807 5.627-5.48 5.922.43.372.812 1.103.812 2.222v3.293c0 .321.218.694.825.576C20.565 21.796 24 17.3 24 12 24 5.373 18.627 0 12 0z"/>
                   </svg>
                   View source
                </a>
            </div>
        `;
        toc.appendChild(sourceLink);
    }
});
</script>
```
